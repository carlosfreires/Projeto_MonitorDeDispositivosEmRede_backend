const chalk = require('chalk');
const { LogMonitoramento } = require('../../../../models/LogMonitoramento.js');

/**
 * Lista logs de monitoramento por equipamento, com possibilidade de filtro por per√≠odo.
 */
async function listarPorEquipamento(ids, dataInicial = null, dataFinal = null) {
    console.info(chalk.blue('üîß Iniciando a fun√ß√£o listarPorEquipamento()'));

    try {
        // Valida√ß√£o dos IDs
        if (!ids || !Array.isArray(ids) || ids.length === 0) {
            console.error(chalk.red('‚ùå IDs de equipamentos inv√°lidos ou ausentes.'));
            throw new Error('IDs de equipamentos inv√°lidos ou ausentes');
        } else {
            console.log(chalk.green(`üìã IDs recebidos: ${ids.join(', ')}`));
        }

        // Log dos par√¢metros de per√≠odo
        if (dataInicial || dataFinal) {
            console.log(chalk.yellow(`üìÖ Intervalo de datas fornecido: Inicial = ${dataInicial}, Final = ${dataFinal}`));
        } else {
            console.log(chalk.yellow('üìÖ Nenhum intervalo de datas fornecido. Listando todos os logs para os IDs.'));
        }

        // Chama o modelo para listar os logs
        console.info(chalk.green('üîç Chamando LogMonitoramento.listarPorEquipamento() para obter os dados.'));
        const logs = await LogMonitoramento.listarPorEquipamento(ids, dataInicial, dataFinal);
        console.info(chalk.greenBright(`‚úÖ Logs listados com sucesso. Total: ${logs.length}`));
        return logs;

    } catch (error) {
        console.error(chalk.red(`‚ùå Erro ao listar logs por equipamento: ${error.message}`));
        throw new Error('Erro ao listar logs por equipamento: ' + error.message);
    }
}

module.exports = { listarPorEquipamento };