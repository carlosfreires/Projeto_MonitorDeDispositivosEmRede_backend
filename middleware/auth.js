const jwt = require('jsonwebtoken');
const { obterConexao } = require('../database/conectadb');
require('dotenv').config(); // Carrega vari√°veis de ambiente
const chalk = require('chalk');

const JWT_SECRET = process.env.JWT_SECRET || 'seu_segredo_super_secreto';

/**
 * Middleware de Autentica√ß√£o
 * @param {Request} req - Objeto de requisi√ß√£o.
 * @param {Response} res - Objeto de resposta.
 * @param {Function} next - Pr√≥ximo middleware.
 */
async function autenticar(req, res, next) {
    try {
        console.info(chalk.blue('üîë [Autentica√ß√£o] Iniciando autentica√ß√£o...'));

        // Obt√©m o token do cabe√ßalho
        const token = req.headers.authorization?.split(' ')[1];
        if (!token) {
            console.warn(chalk.yellow('‚ö†Ô∏è [Autentica√ß√£o] Token n√£o fornecido.'));
            return res.status(401).json({ error: 'Token n√£o fornecido.' });
        }

        console.info(chalk.blue('‚úÖ [Autentica√ß√£o] Token recebido com sucesso.'));

        // Verifica o token JWT
        const payload = jwt.verify(token, JWT_SECRET);
        console.info(chalk.green('üîê [Autentica√ß√£o] Token JWT verificado com sucesso.'));

        // Verifica se o token est√° ativo no banco de dados
        console.info(chalk.blue('üì° [Autentica√ß√£o] Verificando sess√£o no banco de dados...'));
        const db = await obterConexao();
        const query = `SELECT * FROM sessoes WHERE token = ? AND expiracao > CURRENT_TIMESTAMP`;
        const [result] = await db.execute(query, [token]);

        if (result.length === 0) {
            console.warn(chalk.yellow('‚ö†Ô∏è [Autentica√ß√£o] Sess√£o expirada ou inv√°lida.'));
            return res.status(401).json({ error: 'Sess√£o expirada ou inv√°lida.' });
        }

        console.info(chalk.green('‚úÖ [Autentica√ß√£o] Sess√£o v√°lida.'));

        req.usuario = payload; // Armazena os dados do usu√°rio na requisi√ß√£o

        console.info(chalk.green('üöÄ [Autentica√ß√£o] Usu√°rio autenticado com sucesso.'));
        next(); // Chama o pr√≥ximo middleware
    } catch (erro) {
        console.error(chalk.red('‚ùå [Autentica√ß√£o] Erro durante o processo de autentica√ß√£o.'));
        console.error(chalk.red(`üõë Mensagem: ${erro.message}`));

        let mensagemErro = 'N√£o autorizado.';
        if (erro.name === 'TokenExpiredError') {
            mensagemErro = 'Token expirado.';
            console.warn(chalk.yellow('‚ö†Ô∏è [Autentica√ß√£o] Token expirado.'));
        } else if (erro.name === 'JsonWebTokenError') {
            mensagemErro = 'Token inv√°lido.';
            console.warn(chalk.yellow('‚ö†Ô∏è [Autentica√ß√£o] Token inv√°lido.'));
        }

        res.status(401).json({ error: mensagemErro });
    }
}

module.exports = { autenticar };